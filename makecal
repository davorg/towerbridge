#!/usr/bin/perl

use strict;
use warnings;
use 5.010;

use Data::Dumper;
use DateTime;
use DateTime::Format::Strptime;
use Web::Query;
use JSON;
use Data::ICal;
use Data::ICal::Entry::Event;
use Data::ICal::Entry::TimeZone;
use Data::ICal::Entry::TimeZone::Standard;
use Data::ICal::Entry::TimeZone::Daylight;
use Template;

my $i = 0;

my $now = DateTime->now(time_zone => 'Europe/London');
my ($curr_mon, $curr_year) = ($now->month, $now->year);

my $ical = Data::ICal->new();
my $dt_parser = DateTime::Format::Strptime->new(
  time_zone => 'Europe/London',
  pattern => '%H:%M %d %b %Y',
);

my $now_ical = dt2ical($now);

my @lifts;

wq('http://www.towerbridge.org.uk/lift-times/')
  ->find('table.lined tbody tr')
  ->each(sub { push @lifts, [ map { $_->text } $_[1]->contents ] });

my %seen;
my (@json, @lift_data, $json_ld);

foreach (@lifts) {
  my $date = $dt_parser->parse_datetime("$_->[2] $_->[1] $curr_year");
  # If the month number of this event is less than the current month
  # number then we've gone to the next year. Increment the year number
  # and re-calculate.
  if ($date->mon < $curr_mon) {
    ++$curr_year;
    $date = $dt_parser->parse_datetime("$_->[2] $_->[1] $curr_year");
  }

  # Tower Bridge web site occasionally has duplicates
  next if $seen{$date->epoch}++;

  my $event = Data::ICal::Entry::Event->new();
  $event->add_properties(
    summary => 'Tower Bridge Lift',
    description => "$_->[3] ($_->[4])",
    dtstart => dt2ical($date),
    duration => 'PT10M',
    dtstamp => $now_ical,
    uid => $date->epoch . '@towerbridge.dave.org.uk',
  );
  $ical->add_entry($event);

  my $lift;
  $lift->{datetime}  = $date->iso8601 . $date->strftime('%z');
  $lift->{vessel}    = $_->[3];
  $lift->{direction} = $_->[4];

  push @json, { %$lift };
  $lift->{datetime} = $date;
  push @lift_data, $lift;
  push @$json_ld, {
    '@context' => 'http://schema.org',
    '@type'    => 'Event',
    location   => {
      '@type'  => 'Place',
      'name'   => 'Tower Bridge',
      address  => {
        '@type' => 'PostalAddress',
	streetAddress => 'Tower Bridge Road',
        addressRegion => 'London',
      },
    },
    name       => "$lift->{vessel} ($lift->{direction})",
    startDate  => $date->iso8601,
  };
}


my $tz = Data::ICal::Entry::TimeZone->new;
$tz->add_properties(
  tzid => 'Europe/London',
);

my $std = Data::ICal::Entry::TimeZone::Standard->new;
$std->add_properties(
  dtstart => '19710101T020000',
  tzoffsetto => '+0000',
  tzoffsetfrom => '+0100',
  rrule => 'FREQ=YEARLY;WKST=MO;INTERVAL=1;BYMONTH=10;BYDAY=-1SU',
);
$tz->add_entry($std);

my $day = Data::ICal::Entry::TimeZone::Daylight->new;
$day->add_properties(
  dtstart => '19710101T010000',
  tzoffsetto => '+0100',
  tzoffsetfrom => '+0000',
  rrule => 'FREQ=YEARLY;WKST=MO;INTERVAL=1;BYMONTH=3;BYDAY=-1SU',
);
$tz->add_entry($day);

$ical->add_entry($tz);

open my $ical_fh, '>', 'towerbridge.ics' or die $!;
print $ical_fh $ical->as_string;

open my $json_fh, '>', 'towerbridge.json' or die $!;
print $json_fh JSON->new->pretty->encode({ lifts => \@json });

my $ld_str = JSON->new->pretty->encode($json_ld);

my $tt = Template->new;
$tt->process('index.tt', { json_ld => $ld_str,
		           lifts   => \@lift_data }, 'index.html')
  or die $tt->error;

sub dt2ical {
  my ($dt) = @_;

  return [ $dt->strftime('%Y%m%dT%H%M%S'), { TZID => 'Europe/London' } ];
}
